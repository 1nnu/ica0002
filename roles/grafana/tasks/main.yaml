- name: Grafana directory
  ansible.builtin.file:
    name: "{{ item }}"
    state: directory
  loop:
    - /opt/grafana/provisioning/dashboards
    - /opt/grafana/provisioning/datasources

- name: Grafana configuration
  ansible.builtin.template:
    src: grafana.ini.j2
    dest: /opt/grafana/grafana.ini
  no_log: true
  notify: Restart Grafana

- name: Copy datasource.yml.j2
  ansible.builtin.template:
    src: datasource.yml.j2
    dest: /opt/grafana/provisioning/datasources/datasource.yml
  no_log: true
  notify: Restart Grafana

- name: Configure dashboards
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/opt/grafana/provisioning/dashboards/{{item}}"
  loop:
  - dashboard.yml
  - main.json
  - syslog.json
  - backups.json
  - mysql.json
  no_log: true
  notify: Restart Grafana

- name: Change grafana config
  ansible.builtin.template:
    src: grafana.ini.j2
    dest: /opt/grafana/grafana.ini
  notify: Restart Grafana

- name: Grafana Docker container
  community.docker.docker_container:
    image: grafana/grafana
    name: grafana
    published_ports: "{{ grafana_port }}:3000"
    volumes: /opt/grafana:/etc/grafana
    restart_policy: unless-stopped

- name: Gather facts for the first dns_primary host
  ansible.builtin.setup:
  delegate_to: "{{ groups['dns_primary'][0] }}"
  register: dns_primary_facts
  no_log: true

- name: Set server_ip variable to the IP of the first dns_primary host
  ansible.builtin.set_fact:
    primary_dns_server_ip: "{{ dns_primary_facts.ansible_facts.ansible_default_ipv4.address }}"
  no_log: true

- name: Add grafana CNAME records
  community.general.nsupdate:
    key_name: "nsupdate.key"
    key_secret: "{{ dns_nsupdate_key }}"
    key_algorithm: "hmac-sha256"
    zone: "{{ domain }}"
    server: "{{ primary_dns_server_ip }}"
    record: "grafana{{ inventory_hostname[-1] if groups['prometheus_servers']|length - 1 else None }}"
    value: "{{ inventory_hostname }}"
    type: "CNAME"
  no_log: true