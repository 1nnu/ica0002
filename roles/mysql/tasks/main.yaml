---
  - name: Install mysql-server from APT
    ansible.builtin.apt:
      name: mysql-server

  - name: Mysql configuration
    ansible.builtin.template:
      src: override.cnf.j2
      dest: /etc/mysql/mysql.conf.d/override.cnf
    notify: Restart MySQL
    no_log: true

  - name: Install PyMySql from APT
    ansible.builtin.apt:
      name: python3-pymysql

  - name: Check mysql enabled and started
    ansible.builtin.service:
      name: mysql
      state: started
      enabled: true

  - name: Create database
    community.mysql.mysql_db:
      name: "{{ mysql_database }}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    notify:
      - Reset MySQL source
      - Reset MySQL replica

  - name: Create agama as database user
    community.mysql.mysql_user:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ mysql_user }}"
      password: "{{ mysql_password }}"
      host: "%"
      priv: "{{ mysql_database }}.*:ALL"
    no_log: true

  - name: Install mysql exporter
    ansible.builtin.apt:
      name: prometheus-mysqld-exporter
  
  - name: Create exporter user
    community.mysql.mysql_user:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ mysql_exporter_user }}"
      password: "{{ mysql_exporter_password }}"
      priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"

  - name: Copy .my.cnf to /var/lib/prometheus/.my.cnf
    ansible.builtin.template:
      dest: /var/lib/prometheus/.my.cnf
      src: my.cnf.exporter.j2
      mode: 0400
      owner: prometheus
    no_log: true
    notify: Restart node exporter

  - name: Execute handler early
    meta: flush_handlers

  - name: Check mysql enabled and started
    ansible.builtin.service:
      name: mysql
      state: started
      enabled: true
  
  - name: Check node exporter started
    ansible.builtin.service:
      name: prometheus-mysqld-exporter
      state: started
      enabled: true

  - name: Create directory mysql backup
    ansible.builtin.file:
      path: /home/backup/mysql
      owner: backup
      group: backup
      state: directory
      mode: 0750

  - name: Create backup as database user
    community.mysql.mysql_user:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ backup_mysql_user }}"
      password: "{{ backup_mysql_password }}"
      host: "localhost"
      priv: "{{ mysql_database }}.*:LOCK TABLES,SELECT"
      state: present
    no_log: true

  - name: Copy .my.cnf to /home/backup/.my.cnf
    ansible.builtin.template:
      dest: /home/backup/.my.cnf
      src: my.cnf.backup.j2
      mode: 0400
      owner: backup
    no_log: true
  
  - name: Copy cron schedule file
    ansible.builtin.template:
      src: mysql-backup
      dest: /etc/cron.d/mysql-backup

  - name: MySQL user for replication
    community.mysql.mysql_user:
      name: "{{ mysql_replication_user }}"
      password: "{{ mysql_replication_password }}"
      host: "%"
      priv: "*.*:REPLICATION SLAVE"
      login_unix_socket: /var/run/mysqld/mysqld.sock
    no_log: true

  - name: MySQL read only mode
    community.mysql.mysql_variables:
      variable: read_only
      value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
      mode: persist
      login_unix_socket: /var/run/mysqld/mysqld.sock
    notify:
      - Reset MySQL source
      - Reset MySQL replica


  - name: Add mysql CNAME records
    community.general.nsupdate:
      key_name: "nsupdate.key"
      key_secret: "{{ dns_nsupdate_key }}"
      key_algorithm: "hmac-sha256"
      zone: "{{ domain }}"
      server: "{{ hostvars[groups['dns_primary'][0]]['ansible_default_ipv4']['address'] }}"
      record: "db-{{ inventory_hostname[-1] if groups['db_servers']|length - 1 else None }}"
      value: "{{ inventory_hostname }}"
      type: "CNAME"
    no_log: true